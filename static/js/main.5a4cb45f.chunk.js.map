{"version":3,"sources":["components/Title.jsx","components/Legend.jsx","components/Card.jsx","components/LoadingSpinner.jsx","components/CardList.jsx","channels/channels.js","components/App.jsx","index.js"],"names":["Title","react_default","a","createElement","style","textAlign","Legend","props","colorClass","status","Fragment","className","concat","Card","href","twichLink","src","logo","alt","streamName","viewers","toLocaleString","undefined","minimumFractionDigits","game","LoadingSpiner","CardList","onlineChannels","offlineChannels","offlineCards","map","elem","src_components_Card","key","_id","display_name","bio","onlineCards","stream","channel","components_LoadingSpinner","CHANNELS","App","state","_this2","this","OfflineStreamsData","OnlineStreamsData","apiCall","url","fetch","then","response","json","console","log","push","catch","error","apiCallsPromises","i","length","Promise","all","setState","e","components_Title","src_components_Legend","src_components_CardList","React","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.5a4cb45f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Title = () => {\r\n  return <h1 style={{ textAlign: \"center\" }}>Twich Viewer: API Practice</h1>;\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./Legend.css\";\r\n\r\nconst Legend = (props) => {\r\n  let colorClass = props.status === \"Online\" ? \"online\" : \"offline\";\r\n\r\n  return (\r\n    <>\r\n      <span className={`legend ${colorClass}`} />\r\n      <span>{props.status}</span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Legend;\r\n","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <a href={props.twichLink}>\r\n      <ul className={`${props.status} flexcontainer`}>\r\n        <div className=\"column1\">\r\n          <li>\r\n            <div className=\"imgContainer\">\r\n              <img\r\n                className=\"profileImg\"\r\n                src={props.logo}\r\n                alt=\"Streamer Avatar\"\r\n              />\r\n            </div>\r\n          </li>\r\n        </div>\r\n        <div className=\"column2\">\r\n          <li className=\"border-bottom\">\r\n            <div className=\"linkContainer\">{props.streamName}</div>\r\n          </li>\r\n          {props.status === \"offline\" ? (\r\n            \"\"\r\n          ) : (\r\n            <>\r\n              <li>\r\n                <strong>Viewers: </strong>\r\n                {props.viewers.toLocaleString(undefined, {\r\n                  minimumFractionDigits: 0\r\n                })}\r\n              </li>\r\n              <li>\r\n                <strong>Currently streaming: </strong>\r\n                <i>{props.game}</i>\r\n              </li>\r\n            </>\r\n          )}\r\n        </div>\r\n      </ul>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./LoadingSpinner.css\";\r\n\r\nconst LoadingSpiner = () => {\r\n  return (\r\n    <div className=\"lds-dual-ring\">\r\n      <span className=\"loadtext mb_hide\">Loading...</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpiner;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport LoadingSpiner from \"./LoadingSpinner\";\r\nimport \"./CardList.css\";\r\n\r\nconst CardList = (props) => {\r\n  if (!props.onlineChannels && !props.offlineChannels) {\r\n    return <LoadingSpiner />;\r\n  } else {\r\n    const offlineCards = props.offlineChannels.map((elem) => {\r\n      return (\r\n        <Card\r\n          key={elem._id}\r\n          status=\"offline\"\r\n          streamName={elem.display_name}\r\n          logo={elem.logo}\r\n          twichLink={\"https://www.twitch.tv/\" + elem.display_name}\r\n          bio={elem.bio}\r\n        />\r\n      );\r\n    });\r\n\r\n    const onlineCards = props.onlineChannels.map((elem) => {\r\n      return (\r\n        <Card\r\n          key={elem.stream._id}\r\n          status=\"online\"\r\n          streamName={elem.stream.channel.display_name}\r\n          logo={elem.stream.channel.logo}\r\n          twichLink={\r\n            \"https://www.twitch.tv/\" + elem.stream.channel.display_name\r\n          }\r\n          viewers={elem.stream.viewers}\r\n          game={elem.stream.game}\r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"cardList\">\r\n        {onlineCards}\r\n        {offlineCards}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CardList;\r\n","//Twich Channels the API calls\r\n\r\nconst CHANNELS = [\r\n  \"ESL_SC2\",\r\n  \"OgamingSC2\",\r\n  \"cretetion\",\r\n  \"freecodecamp\",\r\n  \"storbeck\",\r\n  \"habathcx\",\r\n  \"RobotCaleb\",\r\n  \"noobs2ninjas\"\r\n];\r\n\r\nexport default CHANNELS;\r\n","import React from \"react\";\r\nimport Title from \"./Title\";\r\nimport Legend from \"./Legend\";\r\nimport CardList from \"./CardList\";\r\nimport CHANNELS from \"../channels/channels\";\r\n\r\nclass App extends React.Component {\r\n  state = { offlineChannels: null, onlineChannels: null };\r\n\r\n  componentDidMount() {\r\n    const URL = \"https://wind-bow.glitch.me/twitch-api/\";\r\n    let OfflineStreamsData = [];\r\n    let OnlineStreamsData = [];\r\n\r\n    const apiCall = (channel, url) => {\r\n      return fetch(url + \"streams/\" + channel)\r\n        .then((response) => response.json())\r\n        .then((response) => {\r\n          console.log(\"Request successful\");\r\n          if (response.stream !== null) {\r\n            OnlineStreamsData.push(response);\r\n          } else {\r\n            return fetch(url + \"users/\" + channel)\r\n              .then((response) => response.json())\r\n              .then((response) => {\r\n                OfflineStreamsData.push(response);\r\n              })\r\n              .catch((error) => console.log(\"Request failed\", error));\r\n          }\r\n        })\r\n        .catch((error) => console.log(\"Request failed\", error));\r\n    };\r\n\r\n    let apiCallsPromises = [];\r\n\r\n    for (let i = 0; i < CHANNELS.length; i++) {\r\n      apiCallsPromises.push(apiCall(CHANNELS[i], URL));\r\n    }\r\n\r\n    Promise.all(apiCallsPromises)\r\n      .then(() => {\r\n        this.setState({\r\n          offlineChannels: OfflineStreamsData,\r\n          onlineChannels: OnlineStreamsData\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e + \"Something wrong happened retreiving the data\");\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <header>\r\n          <Title />\r\n        </header>\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Legend status=\"Online\" />\r\n          <Legend status=\"Offline\" />\r\n        </div>\r\n        <CardList\r\n          onlineChannels={this.state.onlineChannels}\r\n          offlineChannels={this.state.offlineChannels}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}